// <auto-generated />
using System;
using Checkmate.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Checkmate.DAL.Migrations
{
    [DbContext(typeof(CheckmateContext))]
    [Migration("20220908132616_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Checkmate.DAL.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Elo")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("EncodedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("Salt")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.HasIndex("Salt")
                        .IsUnique();

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2022, 9, 8, 15, 26, 16, 388, DateTimeKind.Local).AddTicks(6075),
                            Elo = 3000,
                            Email = "admin@mail.be",
                            EncodedPassword = new byte[] { 82, 179, 174, 76, 113, 222, 238, 87, 17, 47, 25, 115, 51, 205, 97, 85, 151, 94, 116, 1, 69, 185, 121, 178, 156, 28, 21, 160, 247, 44, 90, 44, 161, 67, 158, 74, 25, 59, 165, 43, 29, 180, 236, 114, 136, 158, 61, 50, 71, 222, 102, 236, 25, 94, 11, 215, 29, 7, 250, 229, 233, 214, 21, 120 },
                            Gender = 0,
                            Nickname = "Admin",
                            Role = 0,
                            Salt = new Guid("5d542a52-4544-41a3-a3b5-835897b55272")
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2022, 9, 8, 15, 26, 16, 388, DateTimeKind.Local).AddTicks(6129),
                            Elo = 1200,
                            Email = "leo@mail.be",
                            EncodedPassword = new byte[] { 211, 238, 49, 97, 146, 253, 134, 17, 182, 72, 94, 10, 121, 166, 199, 173, 226, 141, 121, 248, 229, 141, 93, 252, 97, 236, 196, 17, 224, 199, 226, 236, 234, 153, 110, 95, 67, 180, 33, 160, 107, 20, 91, 124, 15, 4, 228, 153, 176, 76, 59, 176, 20, 216, 46, 72, 177, 129, 33, 4, 65, 6, 47, 248 },
                            Gender = 0,
                            Nickname = "Leo",
                            Role = 1,
                            Salt = new Guid("9d46a9a7-7f72-4da7-8eec-74fc979b106c")
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2022, 9, 8, 15, 26, 16, 388, DateTimeKind.Local).AddTicks(6134),
                            Elo = 2500,
                            Email = "andre@mail.be",
                            EncodedPassword = new byte[] { 121, 226, 141, 81, 230, 6, 175, 138, 251, 205, 65, 6, 233, 184, 136, 184, 214, 209, 25, 129, 73, 188, 131, 61, 141, 118, 163, 138, 86, 55, 89, 36, 177, 48, 101, 243, 179, 164, 13, 224, 63, 144, 15, 139, 254, 35, 48, 19, 17, 214, 228, 149, 81, 122, 199, 177, 39, 40, 192, 121, 218, 223, 233, 122 },
                            Gender = 0,
                            Nickname = "André",
                            Role = 1,
                            Salt = new Guid("78ce23ec-39fd-435c-9c6d-6e35ef06c44f")
                        },
                        new
                        {
                            Id = 13,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elo = 1500,
                            Email = "romuald@mail.be",
                            EncodedPassword = new byte[] { 99, 71, 124, 84, 229, 229, 184, 240, 212, 242, 193, 170, 224, 175, 184, 103, 142, 159, 88, 90, 252, 161, 201, 93, 137, 227, 245, 21, 224, 143, 219, 136, 193, 72, 159, 201, 29, 195, 159, 50, 89, 121, 142, 76, 72, 189, 215, 89, 163, 135, 0, 173, 183, 44, 30, 159, 249, 35, 45, 121, 2, 167, 180, 191 },
                            Gender = 0,
                            Nickname = "Romuald",
                            Role = 1,
                            Salt = new Guid("0a1185a7-0fde-4184-a77a-11079d6f5baf")
                        },
                        new
                        {
                            Id = 14,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elo = 2500,
                            Email = "sarah@mail.be",
                            EncodedPassword = new byte[] { 125, 146, 148, 91, 93, 226, 49, 201, 133, 254, 58, 71, 148, 7, 31, 90, 191, 227, 172, 51, 197, 125, 24, 47, 33, 157, 5, 21, 138, 157, 114, 91, 253, 185, 131, 24, 117, 100, 86, 22, 175, 140, 206, 86, 164, 39, 80, 118, 250, 154, 55, 252, 80, 205, 108, 128, 18, 178, 215, 255, 147, 150, 24, 74 },
                            Gender = 1,
                            Nickname = "Sarah",
                            Role = 1,
                            Salt = new Guid("f3859aca-ef60-439a-a3f4-1b7e522353df")
                        },
                        new
                        {
                            Id = 15,
                            BirthDate = new DateTime(1950, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elo = 1000,
                            Email = "dana@mail.be",
                            EncodedPassword = new byte[] { 62, 199, 7, 146, 79, 168, 250, 250, 243, 146, 166, 212, 17, 125, 14, 79, 68, 34, 3, 29, 134, 196, 81, 87, 23, 191, 84, 94, 173, 232, 99, 8, 215, 232, 144, 52, 117, 7, 6, 104, 192, 133, 103, 52, 100, 138, 233, 84, 184, 214, 100, 175, 172, 207, 3, 182, 54, 223, 57, 212, 242, 179, 94, 79 },
                            Gender = 1,
                            Nickname = "Dana",
                            Role = 1,
                            Salt = new Guid("015120eb-9ae0-45ff-8409-0f92e4a42ed5")
                        },
                        new
                        {
                            Id = 16,
                            BirthDate = new DateTime(1920, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elo = 2999,
                            Email = "bob@mail.be",
                            EncodedPassword = new byte[] { 76, 19, 45, 162, 27, 46, 210, 155, 163, 104, 183, 22, 87, 205, 182, 38, 56, 191, 192, 219, 65, 2, 203, 129, 50, 84, 163, 209, 82, 169, 132, 12, 134, 172, 159, 21, 46, 204, 252, 123, 39, 12, 229, 5, 119, 56, 83, 185, 131, 176, 80, 227, 237, 84, 185, 153, 141, 251, 252, 44, 223, 66, 197, 7 },
                            Gender = 0,
                            Nickname = "Bob",
                            Role = 1,
                            Salt = new Guid("4380c495-2041-49c2-829b-f93b875763e4")
                        });
                });

            modelBuilder.Entity("Checkmate.DAL.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxElo")
                        .HasColumnType("int");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<int?>("MinElo")
                        .HasColumnType("int");

                    b.Property<int>("MinPlayers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WomenOnly")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasCheckConstraint("CK_MINMAX_ELO", "MinElo <= MaxElo");

                    b.HasCheckConstraint("CK_MINMAX_PLAYERS", "MinPlayers <= MaxPlayers");

                    b.HasCheckConstraint("CK_OKMAXVALUE_MAXPLAYERS", "MaxPlayers <= 32");

                    b.HasCheckConstraint("CK_OKMAXVALUE_MINELO", "MinElo <= 3000");

                    b.HasCheckConstraint("CK_OKMINVALUE_MINPLAYERS", "MinPlayers >= 2");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 4,
                            CreationDate = new DateTime(2022, 9, 8, 15, 26, 16, 388, DateTimeKind.Local).AddTicks(6524),
                            Location = "Jardin d'Eden",
                            MaxElo = 3000,
                            MaxPlayers = 32,
                            MinElo = 1000,
                            MinPlayers = 2,
                            Name = "Tournoi originel",
                            RegistrationEndDate = new DateTime(2023, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Round = 0,
                            Status = 0,
                            UpdateDate = new DateTime(2022, 9, 8, 15, 26, 16, 388, DateTimeKind.Local).AddTicks(6529),
                            WomenOnly = true
                        });
                });

            modelBuilder.Entity("MemberTournament", b =>
                {
                    b.Property<int>("MembersId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentsId")
                        .HasColumnType("int");

                    b.HasKey("MembersId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("MemberTournament");
                });

            modelBuilder.Entity("MemberTournament", b =>
                {
                    b.HasOne("Checkmate.DAL.Entities.Member", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Checkmate.DAL.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
